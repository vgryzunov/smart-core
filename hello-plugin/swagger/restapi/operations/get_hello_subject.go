// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetHelloSubjectHandlerFunc turns a function with the right signature into a get hello subject handler
type GetHelloSubjectHandlerFunc func(GetHelloSubjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHelloSubjectHandlerFunc) Handle(params GetHelloSubjectParams) middleware.Responder {
	return fn(params)
}

// GetHelloSubjectHandler interface for that can handle valid get hello subject params
type GetHelloSubjectHandler interface {
	Handle(GetHelloSubjectParams) middleware.Responder
}

// NewGetHelloSubject creates a new http.Handler for the get hello subject operation
func NewGetHelloSubject(ctx *middleware.Context, handler GetHelloSubjectHandler) *GetHelloSubject {
	return &GetHelloSubject{Context: ctx, Handler: handler}
}

/*GetHelloSubject swagger:route GET /hello/{subject} getHelloSubject

Returns response to greetinge.

*/
type GetHelloSubject struct {
	Context *middleware.Context
	Handler GetHelloSubjectHandler
}

func (o *GetHelloSubject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetHelloSubjectParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
